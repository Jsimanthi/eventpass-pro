# This is the single source of truth for running the entire EventPass Pro application.
# It defines all the services (backend, frontend, databases, etc.) and how they connect.
# To run the entire stack, use 'docker-compose up --build' from the project root.

services:
  # The primary PostgreSQL database
  postgres:
    image: timescale/timescaledb:latest-pg15 # This image includes the TimescaleDB extension.
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # This line is new. It mounts the schema file into the Postgres init directory.

  # The read-replica PostgreSQL database
  replica:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}_replica # Note: The DB name is different
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5433:5432' # Expose on a different host port to avoid conflicts
    volumes:
      - replica_data:/var/lib/postgresql/data

  # LibSQL for fallback database
  libsql:
    image: ghcr.io/tursodatabase/libsql-server:latest
    restart: always
    ports:
      - '8081:8080' # LibSQL HTTP API port
    environment:
      - LIBSQL_SQLITE_TRACE=1
    volumes:
      - libsql_data:/var/lib/libsql/data
    command: libsql-server --http-listen-addr 0.0.0.0:8080

  # Minio for S3-compatible object storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000" # API port
      - "9001:9001" # Console UI port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadminpassword
    command: server /data --console-address ":9001"

  # Redis for caching and session management
  redis:
    image: redis:7
    ports:
      - "6379:6379"

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP port for applications
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password

  # The Go backend API
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    restart: always
    depends_on:
      - postgres
      - redis
      - rabbitmq
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY_ID=${MINIO_ACCESS_KEY_ID}
      - MINIO_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
    command: ["wait-for-services.sh", "postgres:5432", "rabbitmq:5672", "redis:6379", "--", "/app/backend"]

  # The React/Vite frontend
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    restart: always
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8080

  # The background worker for processing tasks
  worker:
    build:
      context: .
      dockerfile: ./apps/workers/Dockerfile
    restart: always
    depends_on:
      - postgres
      - replica
      - rabbitmq
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REPLICA_DATABASE_URL=${REPLICA_DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    command: ["wait-for-services.sh", "postgres:5432", "rabbitmq:5672", "--", "/app/worker"]
  
  # The background reprinter for processing tasks
  reprinter:
    build:
      context: .
      dockerfile: ./apps/reprinter/Dockerfile
    restart: always
    depends_on:
      - postgres
      - replica
      - rabbitmq
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REPLICA_DATABASE_URL=${REPLICA_DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    command: ["wait-for-services.sh", "postgres:5432", "rabbitmq:5672", "--", "/app/reprinter"]

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.44.0
    restart: always
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.2.2
    restart: always
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - '3001:3000'

  # Logging services
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    ports:
      - '24224:24224'
      - '24224:24224/udp'
    volumes:
      - ./monitoring/logging/fluentd-config.conf:/fluentd/etc/fluentd.conf
    depends_on:
      - elasticsearch

volumes:
  postgres_data:
  replica_data:
  elasticsearch_data:
  libsql_data:
