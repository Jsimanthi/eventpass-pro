// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const anonymizeUser = `-- name: AnonymizeUser :exec
UPDATE users SET email = 'anonymized', password_hash = 'anonymized', deleted_at = NOW(), anonymized_at = NOW() WHERE id = $1
`

func (q *Queries) AnonymizeUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, anonymizeUser, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password_hash, deleted_at, anonymized_at) VALUES ($1, $2, $3, NULL, NULL) RETURNING id, email, password_hash, created_at, updated_at, deleted_at, anonymized_at
`

type CreateUserParams struct {
	ID           pgtype.UUID
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, created_at, updated_at, deleted_at, anonymized_at FROM users WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, created_at, updated_at, deleted_at, anonymized_at FROM users WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}
