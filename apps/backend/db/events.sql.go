// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  name, date, location
)
VALUES (
  $1, $2, $3
)
RETURNING id, name, date, location
`

type CreateEventParams struct {
	Name     string
	Date     pgtype.Timestamp
	Location string
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent, arg.Name, arg.Date, arg.Location)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.Location,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, date, location FROM events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.Location,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, name, date, location FROM events
ORDER BY name
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
  name = $2,
  date = $3,
  location = $4
WHERE id = $1
RETURNING id, name, date, location
`

type UpdateEventParams struct {
	ID       int32
	Name     string
	Date     pgtype.Timestamp
	Location string
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.ID,
		arg.Name,
		arg.Date,
		arg.Location,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.Location,
	)
	return i, err
}
