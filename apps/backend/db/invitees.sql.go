// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: invitees.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const anonymizeInvitee = `-- name: AnonymizeInvitee :exec
UPDATE invitees SET email = 'anonymized', qr_code_url = NULL, hmac_signature = NULL, deleted_at = NOW(), anonymized_at = NOW() WHERE id = $1
`

func (q *Queries) AnonymizeInvitee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, anonymizeInvitee, id)
	return err
}

const createInvitee = `-- name: CreateInvitee :one
INSERT INTO invitees (
  event_id,
  email,
  expires_at,
  status,
  deleted_at,
  anonymized_at
) VALUES (
  $1, $2, $3, $4, NULL, NULL
)
RETURNING id, event_id, email, created_at, updated_at, qr_code_url, hmac_signature, state, gift_claimed_at, expires_at, status, deleted_at, anonymized_at
`

type CreateInviteeParams struct {
	EventID   int32
	Email     string
	ExpiresAt pgtype.Timestamptz
	Status    string
}

func (q *Queries) CreateInvitee(ctx context.Context, arg CreateInviteeParams) (Invitee, error) {
	row := q.db.QueryRow(ctx, createInvitee,
		arg.EventID,
		arg.Email,
		arg.ExpiresAt,
		arg.Status,
	)
	var i Invitee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QrCodeUrl,
		&i.HmacSignature,
		&i.State,
		&i.GiftClaimedAt,
		&i.ExpiresAt,
		&i.Status,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}

const getExpiredInvitees = `-- name: GetExpiredInvitees :many
SELECT id, event_id, email, created_at, updated_at, qr_code_url, hmac_signature, state, gift_claimed_at, expires_at, status, deleted_at, anonymized_at
FROM invitees
WHERE expires_at < now() AND status = 'pending'
`

func (q *Queries) GetExpiredInvitees(ctx context.Context) ([]Invitee, error) {
	rows, err := q.db.Query(ctx, getExpiredInvitees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invitee
	for rows.Next() {
		var i Invitee
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.QrCodeUrl,
			&i.HmacSignature,
			&i.State,
			&i.GiftClaimedAt,
			&i.ExpiresAt,
			&i.Status,
			&i.DeletedAt,
			&i.AnonymizedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvitee = `-- name: GetInvitee :one
SELECT id, event_id, email, created_at, updated_at, qr_code_url, hmac_signature, state, gift_claimed_at, expires_at, status, deleted_at, anonymized_at
FROM invitees
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetInvitee(ctx context.Context, id int32) (Invitee, error) {
	row := q.db.QueryRow(ctx, getInvitee, id)
	var i Invitee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QrCodeUrl,
		&i.HmacSignature,
		&i.State,
		&i.GiftClaimedAt,
		&i.ExpiresAt,
		&i.Status,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}

const getInviteeBySignature = `-- name: GetInviteeBySignature :one
SELECT id, event_id, email, created_at, updated_at, qr_code_url, hmac_signature, state, gift_claimed_at, expires_at, status, deleted_at, anonymized_at
FROM invitees
WHERE hmac_signature = $1
LIMIT 1
`

func (q *Queries) GetInviteeBySignature(ctx context.Context, hmacSignature pgtype.Text) (Invitee, error) {
	row := q.db.QueryRow(ctx, getInviteeBySignature, hmacSignature)
	var i Invitee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QrCodeUrl,
		&i.HmacSignature,
		&i.State,
		&i.GiftClaimedAt,
		&i.ExpiresAt,
		&i.Status,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}

const updateInvitee = `-- name: UpdateInvitee :one
UPDATE invitees
SET
  qr_code_url = $2,
  hmac_signature = $3
WHERE id = $1
RETURNING id, event_id, email, created_at, updated_at, qr_code_url, hmac_signature, state, gift_claimed_at, expires_at, status, deleted_at, anonymized_at
`

type UpdateInviteeParams struct {
	ID            int32
	QrCodeUrl     pgtype.Text
	HmacSignature pgtype.Text
}

func (q *Queries) UpdateInvitee(ctx context.Context, arg UpdateInviteeParams) (Invitee, error) {
	row := q.db.QueryRow(ctx, updateInvitee, arg.ID, arg.QrCodeUrl, arg.HmacSignature)
	var i Invitee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QrCodeUrl,
		&i.HmacSignature,
		&i.State,
		&i.GiftClaimedAt,
		&i.ExpiresAt,
		&i.Status,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}

const updateInviteeState = `-- name: UpdateInviteeState :one
UPDATE invitees
SET
  state = $2
WHERE id = $1
RETURNING id, event_id, email, created_at, updated_at, qr_code_url, hmac_signature, state, gift_claimed_at, expires_at, status, deleted_at, anonymized_at
`

type UpdateInviteeStateParams struct {
	ID    int32
	State string
}

func (q *Queries) UpdateInviteeState(ctx context.Context, arg UpdateInviteeStateParams) (Invitee, error) {
	row := q.db.QueryRow(ctx, updateInviteeState, arg.ID, arg.State)
	var i Invitee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QrCodeUrl,
		&i.HmacSignature,
		&i.State,
		&i.GiftClaimedAt,
		&i.ExpiresAt,
		&i.Status,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}

const updateInviteeStateAndClaimGift = `-- name: UpdateInviteeStateAndClaimGift :one
UPDATE invitees
SET
  state = $2,
  gift_claimed_at = now()
WHERE id = $1
RETURNING id, event_id, email, created_at, updated_at, qr_code_url, hmac_signature, state, gift_claimed_at, expires_at, status, deleted_at, anonymized_at
`

type UpdateInviteeStateAndClaimGiftParams struct {
	ID    int32
	State string
}

func (q *Queries) UpdateInviteeStateAndClaimGift(ctx context.Context, arg UpdateInviteeStateAndClaimGiftParams) (Invitee, error) {
	row := q.db.QueryRow(ctx, updateInviteeStateAndClaimGift, arg.ID, arg.State)
	var i Invitee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QrCodeUrl,
		&i.HmacSignature,
		&i.State,
		&i.GiftClaimedAt,
		&i.ExpiresAt,
		&i.Status,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}

const updateInviteeStatus = `-- name: UpdateInviteeStatus :one
UPDATE invitees
SET
  status = $2
WHERE id = $1
RETURNING id, event_id, email, created_at, updated_at, qr_code_url, hmac_signature, state, gift_claimed_at, expires_at, status, deleted_at, anonymized_at
`

type UpdateInviteeStatusParams struct {
	ID     int32
	Status string
}

func (q *Queries) UpdateInviteeStatus(ctx context.Context, arg UpdateInviteeStatusParams) (Invitee, error) {
	row := q.db.QueryRow(ctx, updateInviteeStatus, arg.ID, arg.Status)
	var i Invitee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QrCodeUrl,
		&i.HmacSignature,
		&i.State,
		&i.GiftClaimedAt,
		&i.ExpiresAt,
		&i.Status,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}
