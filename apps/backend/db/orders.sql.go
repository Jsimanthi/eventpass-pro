// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const anonymizeOrder = `-- name: AnonymizeOrder :exec
UPDATE orders SET user_id = NULL, deleted_at = NOW(), anonymized_at = NOW() WHERE id = $1
`

func (q *Queries) AnonymizeOrder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, anonymizeOrder, id)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, event_id, status, expires_at, deleted_at, anonymized_at) VALUES ($1, $2, $3, $4, NULL, NULL) RETURNING id, user_id, event_id, status, expires_at, deleted_at, anonymized_at
`

type CreateOrderParams struct {
	UserID    pgtype.UUID
	EventID   int32
	Status    string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.EventID,
		arg.Status,
		arg.ExpiresAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Status,
		&i.ExpiresAt,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}

const getExpiredOrders = `-- name: GetExpiredOrders :many
SELECT id, user_id, event_id, status, expires_at, deleted_at, anonymized_at
FROM orders
WHERE expires_at < now() AND status = 'pending'
`

func (q *Queries) GetExpiredOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, getExpiredOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.Status,
			&i.ExpiresAt,
			&i.DeletedAt,
			&i.AnonymizedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET
  status = $2
WHERE id = $1
RETURNING id, user_id, event_id, status, expires_at, deleted_at, anonymized_at
`

type UpdateOrderStatusParams struct {
	ID     int32
	Status string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Status,
		&i.ExpiresAt,
		&i.DeletedAt,
		&i.AnonymizedAt,
	)
	return i, err
}
